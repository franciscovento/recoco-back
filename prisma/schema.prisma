generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
   
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  universities University[]
}

model User {
  id                 String              @id @unique @default(uuid())
  email              String              @unique
  password           String
  username           String              @unique
  rol                Rol                 @default(normal)
  status             UserStatus          @default(active)
  is_verified        Boolean             @default(false)
  university_id      String?
  degree_id          String?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  reset_token        String?             @unique
  confirm_token      String?             @unique
  profile_img        String?
  commends           Comment[]
  commentLikes       CommentLikes[]
  course             Course[]
  courseTeacher      CourseTeacher[]
  degree             Degree[]
  degreeComent       DegreeComent[]
  degreeeCourse      DegreeCourse[]
  faculty            Faculty[]
  facultyComments    FacultyComment[]
  teacher            Teacher[]
  university         University[]
  universityComments UniversityComment[]
}

model University {
  name               String
  website            String?
  phone              String?
  status             Status?             @default(active)
  created_by         String
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  country_id         Int
  slug               String              @unique
  id                 Int                 @id @unique @default(autoincrement())
  faculties          Faculty[]
  teachers           Teacher[]
  country            Country             @relation(fields: [country_id], references: [id])
  user               User                @relation(fields: [created_by], references: [id])
  universityComments UniversityComment[]

  @@unique([name, country_id], map: "unique_university_by_country")
}

model Faculty {
  name            String
  status          Status?          @default(active)
  created_by      String
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  slug            String?          @unique
  id              Int              @id @unique @default(autoincrement())
  university_id   Int
  course          Course[]
  degrees         Degree[]
  user            User             @relation(fields: [created_by], references: [id])
  university      University       @relation(fields: [university_id], references: [id])
  facultyComments FacultyComment[]

  @@unique([name, university_id], map: "unique_faculty_by_university")
}

model Degree {
  name          String
  description   String?
  duration      Decimal?
  status        Status?        @default(active)
  created_by    String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  slug          String?        @unique
  id            Int            @id @unique @default(autoincrement())
  faculty_id    Int
  user          User           @relation(fields: [created_by], references: [id])
  faculty       Faculty        @relation(fields: [faculty_id], references: [id])
  degreeComent  DegreeComent[]
  degreeCourses DegreeCourse[]

  @@unique([name, faculty_id], map: "unique_degree_by_faculty")
}

model Teacher {
  name          String
  last_name     String
  score         Int?
  status        Status?         @default(active)
  created_by    String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  id            Int             @id @unique @default(autoincrement())
  university_id Int
  courseTeacher CourseTeacher[]
  user          User            @relation(fields: [created_by], references: [id])
  university    University      @relation(fields: [university_id], references: [id])

  @@unique([name, last_name, university_id], map: "unique_teacher_by_university")
}

model Course {
  name          String
  description   String?
  short_name    String
  course_code   String?
  status        Status?         @default(active)
  created_by    String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  id            Int             @id @unique @default(autoincrement())
  faculty_id    Int
  user          User            @relation(fields: [created_by], references: [id])
  faculty       Faculty         @relation(fields: [faculty_id], references: [id])
  courseTeacher CourseTeacher[]
  degreeCourses DegreeCourse[]

  @@unique([name, faculty_id], map: "unique_course_by_faculty")
}

model Comment {
  comment       String
  status        CommentStatus  @default(approved)
  created_by    String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  difficulty    Int
  quality       Int
  disLikes      Int?           @default(0)
  likes         Int?           @default(0)
  course_id     Int
  teacher_id    Int
  id            String         @id @unique @default(uuid())
  courseTeacher CourseTeacher  @relation(fields: [course_id, teacher_id], references: [course_id, teacher_id])
  user          User           @relation(fields: [created_by], references: [id])
  commentLikes  CommentLikes[]
}

model CommentLikes {
  is_like    Boolean
  created_by String
  comment_id String
  comment    Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [created_by], references: [id])

  @@id([comment_id, created_by])
}

model DegreeCourse {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String
  degree_id  Int
  course_id  Int
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [created_by], references: [id])
  degree     Degree   @relation(fields: [degree_id], references: [id])

  @@id([degree_id, course_id])
}

model CourseTeacher {
  quality            Decimal?
  difficulty         Decimal?
  status             Status    @default(active)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  created_by         String
  course_id          Int
  teacher_id         Int
  teacher_class_name String?
  comments           Comment[]
  course             Course    @relation(fields: [course_id], references: [id])
  user               User      @relation(fields: [created_by], references: [id])
  teacher            Teacher   @relation(fields: [teacher_id], references: [id])

  @@id([course_id, teacher_id])
}

model UniversityComment {
  user_id       String
  university_id Int
  comment       String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  university    University @relation(fields: [university_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])

  @@id([user_id, university_id])
}

model FacultyComment {
  user_id    String
  faculty_id Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  faculty    Faculty  @relation(fields: [faculty_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([user_id, faculty_id])
}

model DegreeComent {
  user_id    String
  degree_id  Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  degree     Degree   @relation(fields: [degree_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([user_id, degree_id])
}

enum Rol {
  normal
  manager
  super_user
}

enum UserStatus {
  active
  deleted
  blocked
}

enum Status {
  active
  draft
  reported
  deleted
}

enum CommentStatus {
  approved
  onReview
  pending
  deleted
  spam
  rejected
}
